/**
 * HTTP API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
 */

import axios from 'axios';

export class TelegramHttpAPI {
  private botToken: string;
  private baseURL: string;

  constructor(botToken: string) {
    this.botToken = botToken;
    this.baseURL = `https://api.telegram.org/bot${botToken}`;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ HTTP API
   * @param chatId ID —á–∞—Ç–∞/–≥—Ä—É–ø–ø—ã
   * @param message –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async sendMessage(chatId: number | string, message: string): Promise<boolean> {
    try {
      const response = await axios.post(`${this.baseURL}/sendMessage`, {
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML'
      });

      return response.data.ok === true;
    } catch (error) {
      console.error('Error sending Telegram message via HTTP API:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —É—Å–ª—É–≥—É –≤ –≥—Ä—É–ø–ø—É
   * @param leadData –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async sendServiceLeadToGroup(leadData: { 
    name: string; 
    phone: string; 
    email?: string; 
    serviceName: string 
  }): Promise<boolean> {
    try {
      // ID –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫
      const GROUP_CHAT_ID = -1002638718178;
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π
      const message = 
        `üöÄ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —É—Å–ª—É–≥—É!</b>\n\n` +
        `üìã <b>–£—Å–ª—É–≥–∞:</b> ${leadData.serviceName}\n` +
        `üë§ <b>–ò–º—è:</b> ${leadData.name}\n` +
        `üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>${leadData.phone}</code>` +
        (leadData.email ? `\nüìß <b>Email:</b> ${leadData.email}` : '') +
        `\n\n‚è∞ <b>–î–∞—Ç–∞:</b> ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
      const success = await this.sendMessage(GROUP_CHAT_ID, message);
      
      if (success) {
        console.log('Service lead sent to Telegram group successfully via HTTP API');
      } else {
        console.error('Failed to send service lead to Telegram group via HTTP API');
      }
      
      return success;
    } catch (error) {
      console.error('Error sending service lead to Telegram group via HTTP API:', error);
      return false;
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä HTTP API –¥–ª—è Telegram —Å —Ç–æ–∫–µ–Ω–æ–º @summa_help_bot
export const telegramHttpAPI = new TelegramHttpAPI(process.env.SUMMA_HELP_BOT_TOKEN || '');